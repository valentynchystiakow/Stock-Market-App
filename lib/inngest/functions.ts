// imports required components(modules)
import {inngest} from "@/lib/inngest/client";

type UserForNewsEmail = {
    id: string;
    email: string;
    name: string;
};
import {NEWS_SUMMARY_EMAIL_PROMPT, PERSONALIZED_WELCOME_EMAIL_PROMPT} from "@/lib/inngest/prompts";
import {sendNewsSummaryEmail, sendWelcomeEmail} from "@/lib/nodemailer";
import {getAllUsersForNewsEmail} from "@/lib/actions/user.actions";
import { getWatchlistSymbolsByEmail } from "@/lib/actions/watchlist.actions";
import { getNews } from "@/lib/actions/finnhub.actions";
import {getFormattedTodayDate} from "@/lib/utils";


// creates and exports async inngest function SendSignUpEmail
export const sendSignUpEmail = inngest.createFunction(
    { id: 'sign-up-email' },
    { event: 'app/user.created'},
    // creates and export async function SendSignUpEmail
    async ({ event, step }) => {
        // creates string of user profile data
        const userProfile = `
            - Country: ${event.data.country}
            - Investment goals: ${event.data.investmentGoals}
            - Risk tolerance: ${event.data.riskTolerance}
            - Preferred industry: ${event.data.preferredIndustry}
        `
        // creates prompt for personalized welcome email
        const prompt = PERSONALIZED_WELCOME_EMAIL_PROMPT.replace('{{userProfile}}', userProfile)

        // creates welcome email intro text generated by AI on the next step of inngest workflow
        const response = await step.ai.infer('generate-welcome-intro', {
            model: step.ai.models.gemini({ model: 'gemini-2.5-flash-lite' }),
            body: {
                contents: [
                    {
                        role: 'user',
                        parts: [
                            { text: prompt }
                        ]
                    }]
            }
        })

        // creates and sends welcome email on next step of inngest workflow
        await step.run('send-welcome-email', async () => {
            // creates intro text from response
            const part = response.candidates?.[0]?.content?.parts?.[0];
            const introText = (part && 'text' in part ? part.text : null) ||'Thanks for joining Signalist. You now have the tools to track markets and make smarter moves.'
            // creates email data
            const { data: { email, name } } = event;
            // returns email data to sendWelcomeEmail function
            return await sendWelcomeEmail({ email, name, intro: introText });
        })

        return {
            success: true,
            message: 'Welcome email sent successfully'
        }
    }
)

// creates and exports async inngest function sendDailyNewsSummary
export const sendDailyNewsSummary = inngest.createFunction(
    {id: 'daily-news-summary'},
    // creates event and cron trigger, cron - runs every day at 12:00 EAT (00:00 UTC)
    [ { event: 'app/send.daily.news' }, { cron: '0 12 * * *' } ],
    async ({ step }) => {

        // gets all users from news delivery list on the next step of inngest workflow
        const users = await step.run('get-all-users', getAllUsersForNewsEmail)
        // checks if user array is empty shows error message
        if (!users || users.length === 0) return {success: false, message: 'No users found for news email'}


        // fetches personalized news summary for each user
        const results = await step.run('fetch-user-news', async () => {
            const perUser: Array<{ user: UserForNewsEmail; articles: MarketNewsArticle[] }> = [];
            // for each user of users array fetches personalized news summary
            for (const user of users as UserForNewsEmail[]) {
                // try catch block to handle errors while fetching personalized news summary
                try {
                    const symbols = await getWatchlistSymbolsByEmail(user.email);
                    let articles = await getNews(symbols);
                    // Enforce max 6 articles per user
                    articles = (articles || []).slice(0, 6);
                    // If still empty, fallback to general
                    if (!articles || articles.length === 0) {
                        articles = await getNews();
                        articles = (articles || []).slice(0, 6);
                    }
                    // pushed articles to perUser array
                    perUser.push({ user, articles });
                } catch (e) {
                    console.error('daily-news: error preparing user news', user.email, e);
                    perUser.push({ user, articles: [] });
                }
            }
            return perUser;
        });

        // Summarizes news using AI
        // creates array of user news summaries
        const userNewsSummaries: { user: UserForNewsEmail; newsContent: string | null }[] = [];

        // for each user of results array summarizes news
        for (const { user, articles } of results) {
            // try catch block to handle errors while summarizing news
            try {
                // creates prompt for personalized news summary
                const prompt = NEWS_SUMMARY_EMAIL_PROMPT.replace('{{newsData}}', JSON.stringify(articles, null, 2));
                // infer - generates response from AI model
                const response = await step.ai.infer(`summarize-news-${user.email}`, {
                    model: step.ai.models.gemini({ model: 'gemini-2.5-flash-lite' }),
                    body: {
                        contents: [{ role: 'user', parts: [{ text:prompt }]}]
                    }
                });

                const part = response.candidates?.[0]?.content?.parts?.[0];
                const newsContent = (part && 'text' in part ? part.text : null) || 'No market news.'

                userNewsSummaries.push({ user, newsContent });
            } catch (e) {
                console.error('Failed to summarize news for : ', user.email);
                userNewsSummaries.push({ user, newsContent: null });
            }
        }

        // Sends the emails to users
        await step.run('send-news-emails', async () => {
            // Promise.all - lets to send emails to all users at the same time
            await Promise.all(
                userNewsSummaries.map(async ({ user, newsContent}) => {
                    if(!newsContent) return false;

                    return await sendNewsSummaryEmail({ email: user.email, date: getFormattedTodayDate(), newsContent })
                })
            )
        })

        // returns success message after sending emails
        return { success: true, message: 'Daily news summary emails sent successfully' }
    }
)
